using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;
using Normal.Realtime;

[RealtimeModel]
public partial class TransformSyncModel
{
    [RealtimeProperty(1, true, true)]
    private Vector3 _position;
    [RealtimeProperty(2, true, true)]
    private Vector3 _rotation;
    [RealtimeProperty(3, true, true)]
    private Vector3 _scale;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class TransformSyncModel : RealtimeModel {
    public UnityEngine.Vector3 position {
        get {
            return _cache.LookForValueInCache(_position, entry => entry.positionSet, entry => entry.position);
        }
        set {
            if (this.position == value) return;
            _cache.UpdateLocalCache(entry => { entry.positionSet = true; entry.position = value; return entry; });
            InvalidateReliableLength();
            FirePositionDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 rotation {
        get {
            return _cache.LookForValueInCache(_rotation, entry => entry.rotationSet, entry => entry.rotation);
        }
        set {
            if (this.rotation == value) return;
            _cache.UpdateLocalCache(entry => { entry.rotationSet = true; entry.rotation = value; return entry; });
            InvalidateReliableLength();
            FireRotationDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 scale {
        get {
            return _cache.LookForValueInCache(_scale, entry => entry.scaleSet, entry => entry.scale);
        }
        set {
            if (this.scale == value) return;
            _cache.UpdateLocalCache(entry => { entry.scaleSet = true; entry.scale = value; return entry; });
            InvalidateReliableLength();
            FireScaleDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(TransformSyncModel model, T value);
    public event PropertyChangedHandler<UnityEngine.Vector3> positionDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> rotationDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> scaleDidChange;
    
    private struct LocalCacheEntry {
        public bool positionSet;
        public UnityEngine.Vector3 position;
        public bool rotationSet;
        public UnityEngine.Vector3 rotation;
        public bool scaleSet;
        public UnityEngine.Vector3 scale;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Position = 1,
        Rotation = 2,
        Scale = 3,
    }
    
    public TransformSyncModel() : this(null) {
    }
    
    public TransformSyncModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FirePositionDidChange(UnityEngine.Vector3 value) {
        try {
            positionDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireRotationDidChange(UnityEngine.Vector3 value) {
        try {
            rotationDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireScaleDidChange(UnityEngine.Vector3 value) {
        try {
            scaleDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteBytesLength((uint)PropertyID.Position, WriteStream.Vector3ToBytesLength());
            length += WriteStream.WriteBytesLength((uint)PropertyID.Rotation, WriteStream.Vector3ToBytesLength());
            length += WriteStream.WriteBytesLength((uint)PropertyID.Scale, WriteStream.Vector3ToBytesLength());
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.positionSet) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Position, WriteStream.Vector3ToBytesLength());
            }
            if (entry.rotationSet) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Rotation, WriteStream.Vector3ToBytesLength());
            }
            if (entry.scaleSet) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Scale, WriteStream.Vector3ToBytesLength());
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteBytes((uint)PropertyID.Position, WriteStream.Vector3ToBytes(_position));
            stream.WriteBytes((uint)PropertyID.Rotation, WriteStream.Vector3ToBytes(_rotation));
            stream.WriteBytes((uint)PropertyID.Scale, WriteStream.Vector3ToBytes(_scale));
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.positionSet || entry.rotationSet || entry.scaleSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.positionSet) {
                stream.WriteBytes((uint)PropertyID.Position, WriteStream.Vector3ToBytes(entry.position));
                didWriteProperties = true;
            }
            if (entry.rotationSet) {
                stream.WriteBytes((uint)PropertyID.Rotation, WriteStream.Vector3ToBytes(entry.rotation));
                didWriteProperties = true;
            }
            if (entry.scaleSet) {
                stream.WriteBytes((uint)PropertyID.Scale, WriteStream.Vector3ToBytes(entry.scale));
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Position: {
                    UnityEngine.Vector3 previousValue = _position;
                    _position = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    bool positionExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.positionSet);
                    if (!positionExistsInChangeCache && _position != previousValue) {
                        FirePositionDidChange(_position);
                    }
                    break;
                }
                case (uint)PropertyID.Rotation: {
                    UnityEngine.Vector3 previousValue = _rotation;
                    _rotation = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    bool rotationExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.rotationSet);
                    if (!rotationExistsInChangeCache && _rotation != previousValue) {
                        FireRotationDidChange(_rotation);
                    }
                    break;
                }
                case (uint)PropertyID.Scale: {
                    UnityEngine.Vector3 previousValue = _scale;
                    _scale = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    bool scaleExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.scaleSet);
                    if (!scaleExistsInChangeCache && _scale != previousValue) {
                        FireScaleDidChange(_scale);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _position = position;
        _rotation = rotation;
        _scale = scale;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
