using System.Collections;
using System.Collections.Generic;
using UnityEngine;using Normal.Realtime.Serialization;


    [RealtimeModel]
public partial class BoolSyncModel
{
    [RealtimeProperty(1, true, true)]
    private bool _boolValue;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class BoolSyncModel : IModel {
    // Properties
    public bool boolValue {
        get { return _cache.LookForValueInCache(_boolValue, entry => entry.boolValueSet, entry => entry.boolValue); }
        set { if (value == boolValue) return; _cache.UpdateLocalCache(entry => { entry.boolValueSet = true; entry.boolValue = value; return entry; }); FireBoolValueDidChange(value); }
    }
    
    // Events
    public delegate void BoolValueDidChange(BoolSyncModel model, bool value);
    public event         BoolValueDidChange boolValueDidChange;
    
    // Delta updates
    private struct LocalCacheEntry {
        public bool boolValueSet;
        public bool boolValue;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache;
    
    public BoolSyncModel() {
        _cache = new LocalChangeCache<LocalCacheEntry>();
    }
    
    // Events
    public void FireBoolValueDidChange(bool value) {
        try {
            if (boolValueDidChange != null)
                boolValueDidChange(this, value);
        } catch (System.Exception exception) {
            Debug.LogException(exception);
        }
    }
    
    // Serialization
    enum PropertyID {
        BoolValue = 1,
    }
    
    public int WriteLength(StreamContext context) {
        int length = 0;
        
        if (context.fullModel) {
            // Mark unreliable properties as clean and flatten the in-flight cache.
            // TODO: Move this out of WriteLength() once we have a prepareToWrite method.
            _boolValue = boolValue;
            _cache.Clear();
            
            // Write all properties
            length += WriteStream.WriteVarint32Length((uint)PropertyID.BoolValue, _boolValue ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.boolValueSet)
                    length += WriteStream.WriteVarint32Length((uint)PropertyID.BoolValue, entry.boolValue ? 1u : 0u);
            }
        }
        
        return length;
    }
    
    public void Write(WriteStream stream, StreamContext context) {
        if (context.fullModel) {
            // Write all properties
            stream.WriteVarint32((uint)PropertyID.BoolValue, _boolValue ? 1u : 0u);
        } else {
            // Reliable properties
            if (context.reliableChannel) {
                LocalCacheEntry entry = _cache.localCache;
                if (entry.boolValueSet)
                    _cache.PushLocalCacheToInflight(context.updateID);
                
                if (entry.boolValueSet)
                    stream.WriteVarint32((uint)PropertyID.BoolValue, entry.boolValue ? 1u : 0u);
            }
        }
    }
    
    public void Read(ReadStream stream, StreamContext context) {
        bool boolValueExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.boolValueSet);
        
        // Remove from in-flight
        if (context.deltaUpdatesOnly && context.reliableChannel)
            _cache.RemoveUpdateFromInflight(context.updateID);
        
        // Loop through each property and deserialize
        uint propertyID;
        while (stream.ReadNextPropertyID(out propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.BoolValue: {
                    bool previousValue = _boolValue;
                    
                    _boolValue = (stream.ReadVarint32() != 0);
                    
                    if (!boolValueExistsInChangeCache && _boolValue != previousValue)
                        FireBoolValueDidChange(_boolValue);
                    break;
                }
                default:
                    stream.SkipProperty();
                    break;
            }
        }
    }
}
/* ----- End Normal Autogenerated Code ----- */
